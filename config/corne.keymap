#include <behaviors.dtsi>
// #include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "keymap_french.h"
#include "helper.h"
#include "keypos_42keys.h"
// #include "french_unicode.dtsi"

#define NA &none
#define L_BASE 0
#define L_NAV  1
#define L_NUM  2

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2   

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)
/ {
  // ========
  // BEHAVIOR
  // ========
  behaviors {
    td_l_base: td_l_base {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_base";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_BASE>, <&to L_BASE>;
    };
    td_l_nav: td_l_nav {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_nav";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_NAV>, <&to L_NAV>;
    };
    td_l_num: td_l_num {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_num";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_NUM>, <&to L_NUM>;
    };
    td_bt: td_bt {
      compatible = "zmk,behavior-tap-dance";
      label = "td_bt";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&bt BT_SEL 0>, <&bt BT_SEL 1>;
    };
    td_cc: td_cc { // ç
      compatible = "zmk,behavior-tap-dance";
      label = "td_cc";
      #binding-cells = <0>;
      tapping-term-ms = <500>;
      bindings = <&kp FR_C>, <&kp FR_CCED>;
    };
  };
    td_comma: td_comma { // , ;
      compatible = "zmk,behavior-tap-dance";
      label = "td_comma";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp FR_COMM>, <&kp FR_SCLN>;
    };
 
  // =====
  // MACRO
  // =====
  macros {
    mc_lt: mc_lt {
      label = "mc_lt";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_press &kp LALT>
        , <&macro_tap &kp KP_N6>
        , <&macro_wait_time 50>
        , <&macro_tap &kp KP_N0>
        , <&macro_release &kp LALT>
        ;
    };
    mc_gt: mc_gt {
      label = "mc_gt";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_press &kp LALT>
        , <&macro_tap &kp KP_N6>
        , <&macro_wait_time 50>
        , <&macro_tap &kp KP_N2>
        , <&macro_release &kp LALT>
        ;
    };
  };

  // =====
  // COMBO
  // =====
  combos {
    compatible = "zmk,combos";
    // LEFT
    combo_agrv { // à
      timeout-ms = <30>;
      key-positions = <1 2>;
      bindings = <&kp FR_AGRV>;
    };
    combo_egrv { // è
      timeout-ms = <30>;
      key-positions = <2 3>;
      bindings = <&kp FR_EGRV>;
    };
    combo_eacu { // é
      timeout-ms = <30>;
      key-positions = <3 4>;
      bindings = <&kp FR_EACU>;
    };
    
    combo_copy { // copy
      timeout-ms = <30>;
      key-positions = <26 28>;
      bindings = <&kp LG(FR_C)>;
    };
    combo_cut { // cut
      timeout-ms = <30>;
      key-positions = <26 27>;
      bindings = <&kp LG(FR_X)>;
    };
    combo_paste { // paste
      timeout-ms = <30>;
      key-positions = <27 28>;
      bindings = <&kp LG(FR_V)>;
    };

    // RIGHT
    combo_ugrv { // ù
      timeout-ms = <30>;
      key-positions = <6 7>;
      bindings = <&kp FR_UGRV>;
    };

    combo_1 { // (
      timeout-ms = <30>;
      key-positions = <7 8>;
      bindings = <&kp FR_LPRN>;
    };
    combo_2 { // )
      timeout-ms = <30>;
      key-positions = <8 9>;
      bindings = <&kp FR_LPRN>;
    };

    combo_3 { // [
      timeout-ms = <30>;
      key-positions = <19 20>;
      bindings = <&kp FR_LBRC>;
    };
    combo_4 { // ]
      timeout-ms = <30>;
      key-positions = <20 21>;
      bindings = <&kp FR_RBRC>;
    };

    combo_5 { // {
      timeout-ms = <30>;
      key-positions = <31 32>;
      bindings = <&kp FR_LCBR>;
    };
    combo_6 { // }
      timeout-ms = <30>;
      key-positions = <32 33>;
      bindings = <&kp FR_RCBR>;
    };

    combo_7 { // <
      timeout-ms = <30>;
      key-positions = <20 31>;
      bindings = <&mc_lt>;
    };
    combo_8 { // >
      timeout-ms = <30>;
      key-positions = <20 33>;
      bindings = <&mc_gt>;
    };
  };

  // ======
  // KEYMAP
  // ======
  keymap {
    compatible = "zmk,keymap";

    base_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp FR_A          /* 02 */ &kp FR_Z              /* 03 */ &kp FR_E           /* 04 */ &kp FR_R           /* 05 */ &kp FR_T
/* RIGHT */             /* 06 */ &kp FR_Y          /* 07 */ &kp FR_U              /* 08 */ &kp FR_I           /* 09 */ &kp FR_O           /* 10 */ &kp FR_P         /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &kp FR_Q          /* 14 */ &hml LSHIFT FR_S      /* 15 */ &hml LCTRL FR_D    /* 16 */ &hml LALT FR_F     /* 17 */ &hml LCMD FR_G
/* RIGHT */             /* 18 */ &hmr LCMD FR_H    /* 19 */ &hmr LALT FR_J        /* 20 */ &hmr LCTRL FR_K    /* 21 */ &hmr LSHIFT FR_L   /* 22 */ &kp FR_M         /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &kp ESCAPE        /* 26 */ &kp FR_W              /* 27 */ &kp FR_X           /* 28 */ &td_cc             /* 29 */ &mt INSERT TAB
/* RIGHT */             /* 30 */ &kp BACKSPACE     /* 31 */ &kp FR_V              /* 32 */ &kp FR_B           /* 33 */ &kp FR_N           /* 34 */ &kp DELETE       /* NA 35 */ NA


/* LEFT  */ /* 36 */ &td_l_num      /* 37 */ &td_l_nav   /* 38 */ &kp SPACE
/* RIGHT */ /* 39 */ &kp ENTER      /* 40 */ &td_l_nav   /* 41 */ &td_l_num 
      >;
    };
 
    nav_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp FR_AT              /* 02 */ &mt FR_EXLM FR_QUES /* 03 */ &none                   /* 04 */ &td_comma              /* 05 */ &mt FR_GRV FR_QUOT
/* RIGHT */             /* 06 */ &td_bt                 /* 07 */ &none               /* 08 */ &mt C_MUTE C_VOL_UP     /* 09 */ &mt C_MUTE C_VOL_DN    /* 10 */ &none               /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &hml FR_EURO FR_DLR    /* 14 */ &hml LSHIFT FR_PIPE  /* 15 */ &hml LCTRL FR_COLN     /* 16 */ &hml LALT FR_AMPR      /* 17 */ &hml LCMD FR_DQUO
/* RIGHT */             /* 18 */ &none                  /* 19 */ &mt PAGE_UP HOME     /* 20 */ &kp UP                 /* 21 */ &mt PAGE_DOWN END      /* 22 */ &none               /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &mt FR_TILD FR_HASH    /* 26 */ &none                /* 27 */ &mt FR_DIAE FR_CIRC    /* 28 */ &none                  /* 29 */ &none
/* RIGHT */             /* 30 */ &trans                 /* 31 */ &kp LEFT             /* 32 */ &kp DOWN               /* 33 */ &kp RIGHT              /* 34 */ &trans              /* NA 35 */ NA


/* LEFT  */ /* 36 */ &none      /* 37 */ &td_l_base           /* 38 */ &trans
/* RIGHT */ /* 39 */ &trans     /* 40 */ &td_l_base           /* 41 */ &none 
      >;
    };

    num_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &mt F2 F1        /* 02 */ &mt F4 F3              /* 03 */ &mt F6 F5                /* 04 */ &mt F8 F7            /* 05 */ &mt F10 F9
/* RIGHT */             /* 06 */ &mt F12 F11      /* 07 */ &kp KP_N7              /* 08 */ &kp KP_N8                /* 09 */ &kp KP_N9            /* 10 */ &kp FR_EQL            /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &none            /* 14 */ &hml LSHIFT FR_PERC    /* 15 */ &hml LCTRL KP_MULTIPLY   /* 16 */ &hml LALT FR_PLUS    /* 17 */ &hml LCMD FR_MINS
/* RIGHT */             /* 18 */ &kp KP_N0        /* 19 */ &kp KP_N4              /* 20 */ &kp KP_N5                /* 21 */ &kp KP_N6            /* 22 */ &mt FR_BSLS FR_SLSH   /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &none            /* 26 */ &none                  /* 27 */ &kp FR_DEG               /* 28 */ &kp FR_DOT           /* 29 */ &kp FR_UNDS
/* RIGHT */             /* 30 */ &trans           /* 31 */ &kp KP_N1              /* 32 */ &kp KP_N2                /* 33 */ &kp KP_N3            /* 34 */ &trans                /* NA 35 */ NA


/* LEFT  */ /* 36 */ &none      /* 37 */ &td_l_base           /* 38 */ &trans
/* RIGHT */ /* 39 */ &trans     /* 40 */ &td_l_base           /* 41 */ &none 
      >;
    };
  };
};
