#include <behaviors.dtsi>
// #include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "keymap_french.h"
// #include "helper.h"
// #include "french_unicode.dtsi"

#define NA &none
#define L_BASE 0
#define L_NAV  1
#define L_NUM  2

/ {
  // ========
  // BEHAVIOR
  // ========
  behaviors {
    td_l_base: td_l_base {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_base";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_BASE>, <&to L_BASE>;
    };
    td_l_nav: td_l_nav {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_nav";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_NAV>, <&to L_NAV>;
    };
    td_l_num: td_l_num {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_num";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_NUM>, <&to L_NUM>;
    };
    td_bt: td_bt {
      compatible = "zmk,behavior-tap-dance";
      label = "td_bt";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&bt BT_SEL 0>, <&bt BT_SEL 1>;
    };
  };

  // =====
  // COMBO
  // =====
  combos {
    compatible = "zmk,combos";
    combo_1 { // (
      timeout-ms = <30>;
      key-positions = <7 8>;
      bindings = <&kp FR_LPRN>;
    };
    combo_2 { // )
      timeout-ms = <30>;
      key-positions = <8 9>;
      bindings = <&kp FR_LPRN>;
    };
    combo_3 { // [
      timeout-ms = <30>;
      key-positions = <19 20>;
      bindings = <&kp FR_LBRC>;
    };
    combo_4 { // ]
      timeout-ms = <30>;
      key-positions = <20 21>;
      bindings = <&kp FR_RBRC>;
    };
    combo_5 { // {
      timeout-ms = <30>;
      key-positions = <31 32>;
      bindings = <&kp FR_LCBR>;
    };
    combo_6 { // }
      timeout-ms = <30>;
      key-positions = <32 33>;
      bindings = <&kp FR_RCBR>;
    };
    combo_7 { // <
      timeout-ms = <30>;
      key-positions = <20 31>;
      bindings = <&kp FR_LABK>;
    };
    combo_8 { // >
      timeout-ms = <30>;
      key-positions = <20 33>;
      bindings = <&kp FR_RABK>;
    };
    combo_9 { // cut
      timeout-ms = <30>;
      key-positions = <27 29>;
      bindings = <&kp LG(FR_X)>;
    };
    combo_10 { // copy
      timeout-ms = <30>;
      key-positions = <27 28>;
      bindings = <&kp LG(FR_C)>;
    };
    combo_11 { // paste
      timeout-ms = <30>;
      key-positions = <28 29>;
      bindings = <&kp LG(FR_V)>;
    };
  };

  // ======
  // KEYMAP
  // ======
  keymap {
    compatible = "zmk,keymap";

    base_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp FR_A       /* 02 */ &kp FR_Z           /* 03 */ &kp FR_E        /* 04 */ &kp FR_R        /* 05 */ &kp FR_T
/* RIGHT */             /* 06 */ &kp FR_Y       /* 07 */ &kp FR_U           /* 08 */ &kp FR_I        /* 09 */ &kp FR_O        /* 10 */ &kp FR_P    /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &kp FR_Q       /* 14 */ &mt LSHIFT FR_S    /* 15 */ &mt LCTRL FR_D  /* 16 */ &mt LALT FR_F   /* 17 */ &mt LCMD FR_G
/* RIGHT */             /* 18 */ &mt LCMD FR_H  /* 19 */ &mt LALT FR_J      /* 20 */ &mt LCTRL FR_K  /* 21 */ &mt LSHIFT FR_L /* 22 */ &kp FR_M    /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &kp ESCAPE     /* 26 */ &kp FR_W           /* 27 */ &kp FR_X        /* 28 */ &kp FR_C        /* 29 */ &mt INSERT TAB
/* RIGHT */             /* 30 */ &kp BACKSPACE  /* 31 */ &kp FR_V           /* 32 */ &kp FR_B        /* 33 */ &kp FR_N        /* 34 */ &kp DELETE  /* NA 35 */ NA


/* LEFT  */ /* 36 */ &td_l_num      /* 37 */ &td_l_nav   /* 38 */ &kp SPACE
/* RIGHT */ /* 39 */ &kp ENTER      /* 40 */ &td_l_nav   /* 41 */ &td_l_num 
      >;
    };

    nav_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &td_bt              /* 02 */ &mt C_MUTE C_VOL_DN /* 03 */ &mt C_MUTE C_VOL_UP /* 04 */ &none               /* 05 */ &none
/* RIGHT */             /* 06 */ &mt FR_EGRV FR_EACU /* 07 */ &mt FR_AT FR_AGRV   /* 08 */ &kp FR_UGRV         /* 09 */ &kp FR_CCED         /* 10 */ &none               /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &mt FR_EURO FR_DLR  /* 14 */ &mt LSHIFT FR_PIPE  /* 15 */ &mt LCTRL FR_COLN   /* 16 */ &mt LALT FR_AMPR    /* 17 */ &mt LCMD FR_DQUO
/* RIGHT */             /* 18 */ &none               /* 19 */ &mt PAGE_UP HOME    /* 20 */ &kp UP              /* 21 */ &mt PAGE_DOWN END   /* 22 */ &none               /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &mt FR_TILD FR_HASH /* 26 */ &mt FR_EXLM FR_QUES /* 27 */ &mt FR_DIAE FR_CIRC /* 28 */ &mt FR_SCLN FR_COMM /* 29 */ &mt FR_GRV FR_QUOT
/* RIGHT */             /* 30 */ &trans              /* 31 */ &kp LEFT            /* 32 */ &kp DOWN            /* 33 */ &kp RIGHT           /* 34 */ &trans              /* NA 35 */ NA


/* LEFT  */ /* 36 */ &none      /* 37 */ &td_l_base           /* 38 */ &trans
/* RIGHT */ /* 39 */ &trans     /* 40 */ &td_l_base           /* 41 */ &none 
      >;
    };

    num_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &mt F2 F1     /* 02 */ &mt F4 F3           /* 03 */ &mt F6 F5             /* 04 */ &mt F8 F7        /* 05 */ &mt F10 F9
/* RIGHT */             /* 06 */ &mt F12 F11   /* 07 */ &kp FR_7            /* 08 */ &kp FR_8              /* 09 */ &kp FR_9         /* 10 */ &kp FR_EQL            /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &none         /* 14 */ &mt LSHIFT FR_PERC  /* 15 */ &mt LCTRL KP_MULTIPLY /* 16 */ &mt LALT FR_PLUS /* 17 */ &mt LCMD FR_MINS
/* RIGHT */             /* 18 */ &kp FR_0      /* 19 */ &kp FR_4            /* 20 */ &kp FR_5              /* 21 */ &kp FR_6         /* 22 */ &mt FR_BSLS FR_SLSH   /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &none         /* 26 */ &none               /* 27 */ &kp FR_DEG            /* 28 */ &kp FR_DOT       /* 29 */ &kp FR_UNDS
/* RIGHT */             /* 30 */ &trans        /* 31 */ &kp FR_1            /* 32 */ &kp FR_2              /* 33 */ &kp FR_3         /* 34 */ &trans                /* NA 35 */ NA


/* LEFT  */ /* 36 */ &none      /* 37 */ &td_l_base           /* 38 */ &trans
/* RIGHT */ /* 39 */ &trans     /* 40 */ &td_l_base           /* 41 */ &none 
      >;
    };
  };
};
