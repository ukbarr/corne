#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>

#include "keymap_french.h"
#include "keymap_french_mac_iso.h"
#include "helper.h"
#include "keypos_42keys.h"

#define NA &none
#define L_BASE 0
#define L_NAV  1
#define L_NUM  2
#define L_GAMING 3
#define L_GAMING_2 4
#define LM_BASE 5
#define LM_NAV  6
#define LM_NUM  7

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2   

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)
/ {
  // ========
  // BEHAVIOR
  // ========
  behaviors {
    td_l_base: td_l_base {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_base";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_BASE>, <&to L_BASE>;
    };
    td_l_nav: td_l_nav {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_nav";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_NAV>, <&to L_NAV>;
    };
    td_l_num: td_l_num {
      compatible = "zmk,behavior-tap-dance";
      label = "td_l_num";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo L_NUM>, <&to L_NUM>;
    };
    td_comma: td_comma { // , ;
      compatible = "zmk,behavior-tap-dance";
      label = "td_comma";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_COMM>, <&kp FR_SCLN>;
    };
    td_question: td_question { // ? !
      compatible = "zmk,behavior-tap-dance";
      label = "td_question";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_QUES>, <&kp FR_EXLM>;
    };
    td_hash: td_hash { // # ~
      compatible = "zmk,behavior-tap-dance";
      label = "td_hash";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_HASH>, <&kp FR_TILD>;
    };
    td_slash: td_slash { // # ~
      compatible = "zmk,behavior-tap-dance";
      label = "td_slash";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_SLSH>, <&kp FR_BSLS>;
    };
    td_quote: td_quote { // ' `
      compatible = "zmk,behavior-tap-dance";
      label = "td_quote";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_QUOT>, <&kp FR_GRV>;
    };
    td_dollars: td_dollars { // $ €
      compatible = "zmk,behavior-tap-dance";
      label = "td_dollars";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_DLR>, <&kp FR_EURO>;
    };
    td_ltgt: td_ltgt { // < >
      compatible = "zmk,behavior-tap-dance";
      label = "td_ltgt";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&mc_lt>, <&mc_gt>;
    };

    td_f1_f6: td_f1_f6 {
      compatible = "zmk,behavior-tap-dance";
      label = "td_f1_f6";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp F1>, <&kp F6>;
    };
    td_f2_f7: td_f2_f7 {
      compatible = "zmk,behavior-tap-dance";
      label = "td_f2_f7";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp F2>, <&kp F7>;
    };
    td_f3_f8: td_f3_f8 {
      compatible = "zmk,behavior-tap-dance";
      label = "td_f3_f8";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp F3>, <&kp F8>;
    };
    td_f4_f9: td_f4_f9 {
      compatible = "zmk,behavior-tap-dance";
      label = "td_f4_f9";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp F4>, <&kp F9>;
    };
    td_f5_f10: td_f5_f10 {
      compatible = "zmk,behavior-tap-dance";
      label = "td_f5_f10";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp F5>, <&kp F10>;
    };
    td_f11_f12: td_f11_f12 {
      compatible = "zmk,behavior-tap-dance";
      label = "td_f11_f12";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp F11>, <&kp F12>;
    };
    td_bt0: td_bt0 {
      compatible = "zmk,behavior-tap-dance";
      label = "td_bt0";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&bt BT_SEL 0>, <&to L_BASE>;
    };
    td_bt1: td_bt1 {
      compatible = "zmk,behavior-tap-dance";
      label = "td_bt1";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&bt BT_SEL 1>, <&to LM_BASE>;
    };

    // mac
    td_lm_base: td_lm_base {
      compatible = "zmk,behavior-tap-dance";
      label = "td_lm_base";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo LM_BASE>, <&to LM_BASE>;
    };
    td_lm_nav: td_lm_nav {
      compatible = "zmk,behavior-tap-dance";
      label = "td_lm_nav";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo LM_NAV>, <&to LM_NAV>;
    };
    td_lm_num: td_lm_num {
      compatible = "zmk,behavior-tap-dance";
      label = "td_lm_num";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo LM_NUM>, <&to LM_NUM>;
    };
    td_mquestion: td_mquestion { // ? !
      compatible = "zmk,behavior-tap-dance";
      label = "td_mquestion";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_QUES>, <&kp FRM_EXLM>;
    };
    td_mhash: td_mhash { // # ~
      compatible = "zmk,behavior-tap-dance";
      label = "td_mhash";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FRM_HASH>, <&kp FRM_TILD>;
    };
    td_mslash: td_mslash { // # ~
      compatible = "zmk,behavior-tap-dance";
      label = "td_mslash";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_SLSH>, <&kp FRM_BSLS>;
    };
    td_mquote: td_mquote { // ' `
      compatible = "zmk,behavior-tap-dance";
      label = "td_mquote";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_QUOT>, <&kp FRM_GRV>;
    };
    td_mdollars: td_mdollars { // $ €
      compatible = "zmk,behavior-tap-dance";
      label = "td_mdollars";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp FR_DLR>, <&kp FRM_EURO>;
    };
    td_mltgt: td_mltgt { // < >
      compatible = "zmk,behavior-tap-dance";
      label = "td_mltgt";
      #binding-cells = <0>;
      tapping-term-ms = <350>;
      bindings = <&kp GRAVE>, <&kp LS(GRAVE)>;
    };
  };
  // =====
  // MACRO
  // =====
  macros {
    mc_lt: mc_lt {
      label = "mc_lt";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_press &kp LALT>
        , <&macro_tap &kp KP_N6>
        , <&macro_wait_time 50>
        , <&macro_tap &kp KP_N0>
        , <&macro_release &kp LALT>
        ;
    };
    mc_gt: mc_gt {
      label = "mc_gt";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_press &kp LALT>
        , <&macro_tap &kp KP_N6>
        , <&macro_wait_time 50>
        , <&macro_tap &kp KP_N2>
        , <&macro_release &kp LALT>
        ;
    };
  };

  // =====
  // COMBO
  // =====
  combos {
    compatible = "zmk,combos";
    // LEFT
    combo_agrv { // à
      timeout-ms = <30>;
      key-positions = <1 2>;
      bindings = <&kp FR_AGRV>;
    };
    combo_egrv { // è
      timeout-ms = <30>;
      key-positions = <2 3>;
      bindings = <&kp FR_EGRV>;
    };
    combo_eacu { // é
      timeout-ms = <30>;
      key-positions = <3 4>;
      bindings = <&kp FR_EACU>;
    };
     combo_c { //  c ç
      timeout-ms = <30>;
      key-positions = <27 28>;
      bindings = <&kp FR_CCED>;
    };
    
   
    combo_copy { // cut
      timeout-ms = <30>;
      key-positions = <15 27>;
      bindings = <&kp LG(FR_X)>;
    };
    combo_cut { // copy
      timeout-ms = <30>;
      key-positions = <16 28>;
      bindings = <&kp LG(FR_C)>;
    };
    combo_paste { // paste
      timeout-ms = <30>;
      key-positions = <17 29>;
      bindings = <&kp LG(FR_V)>;
    };
    combo_left_l_num { // layer num
      timeout-ms = <30>;
      key-positions = <36 37>;
      bindings = <&td_l_num>;
      layers = <0 1 2>;
    };
    combo_layer_gaming { // gaming
      timeout-ms = <30>;
      key-positions = <37 38>;
      bindings = <&to L_GAMING>;
    };

    // RIGHT
    combo_ugrv { // ù
      timeout-ms = <30>;
      key-positions = <6 7>;
      bindings = <&kp FR_UGRV>;
    };

    combo_1 { // (
      timeout-ms = <30>;
      key-positions = <7 8>;
      bindings = <&kp FR_LPRN>;
    };
    combo_2 { // )
      timeout-ms = <30>;
      key-positions = <8 9>;
      bindings = <&kp FR_RPRN>;
    };

    combo_3 { // [
      timeout-ms = <30>;
      key-positions = <19 20>;
      bindings = <&kp FR_LBRC>;
      layers = <0 1 2>;
    };
    combo_4 { // ]
      timeout-ms = <30>;
      key-positions = <20 21>;
      bindings = <&kp FR_RBRC>;
      layers = <0 1 2>;
    };

    combo_5 { // {
      timeout-ms = <30>;
      key-positions = <31 32>;
      bindings = <&kp FR_LCBR>;
      layers = <0 1 2>;
    };
    combo_6 { // }
      timeout-ms = <30>;
      key-positions = <32 33>;
      bindings = <&kp FR_RCBR>;
      layers = <0 1 2>;
    };
    combo_right_l_num { // layer num
      timeout-ms = <30>;
      key-positions = <40 41>;
      bindings = <&td_l_num>;
      layers = <0 1 2>;
    };
    
    // mac

    // LEFT
    combo_left_lm_num { // layer num
      timeout-ms = <30>;
      key-positions = <36 37>;
      bindings = <&td_lm_num>;
      layers = <5 6 7>;
    };

    // RIGHT
    combo_3m { // [
      timeout-ms = <30>;
      key-positions = <19 20>;
      bindings = <&kp LS(RA(N5))>;
      layers = <5 6 7>;
    };
    combo_4m { // ]
      timeout-ms = <30>;
      key-positions = <20 21>;
      bindings = <&kp LS(RA(MINUS))>;
      layers = <5 6 7>;
    };

    combo_5m { // {
      timeout-ms = <30>;
      key-positions = <31 32>;
      bindings = <&kp RA(N5)>;
      layers = <5 6 7>;
    };
    combo_6m { // }
      timeout-ms = <30>;
      key-positions = <32 33>;
      bindings = <&kp RA(MINUS)>;
      layers = <5 6 7>;
    };
    combo_right_lm_num { // layer num
      timeout-ms = <30>;
      key-positions = <40 41>;
      bindings = <&td_lm_num>;
      layers = <5 6 7>;
    };
  };

  // ======
  // KEYMAP
  // ======
  keymap {
    compatible = "zmk,keymap";

    base_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp FR_A          /* 02 */ &kp FR_Z              /* 03 */ &kp FR_E           /* 04 */ &kp FR_R           /* 05 */ &kp FR_T
/* RIGHT */             /* 06 */ &kp FR_Y          /* 07 */ &kp FR_U              /* 08 */ &kp FR_I           /* 09 */ &kp FR_O           /* 10 */ &kp FR_P         /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &kp FR_Q          /* 14 */ &hml LSHIFT FR_S      /* 15 */ &hml LCTRL FR_D    /* 16 */ &hml LALT FR_F     /* 17 */ &hml LCMD FR_G
/* RIGHT */             /* 18 */ &hmr LCMD FR_H    /* 19 */ &hmr LALT FR_J        /* 20 */ &hmr LCTRL FR_K    /* 21 */ &hmr LSHIFT FR_L   /* 22 */ &kp FR_M         /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &kp ESCAPE        /* 26 */ &kp FR_W              /* 27 */ &kp FR_X           /* 28 */ &kp FR_C           /* 29 */ &mt INSERT TAB
/* RIGHT */             /* 30 */ &kp BACKSPACE     /* 31 */ &kp FR_V              /* 32 */ &kp FR_B           /* 33 */ &kp FR_N           /* 34 */ &kp DELETE       /* NA 35 */ NA

/* &td_l_num */
/* LEFT  */ /* 36 */ &kp LSHIFT     /* 37 */ &td_l_nav   /* 38 */ &kp SPACE
/* RIGHT */ /* 39 */ &kp ENTER      /* 40 */ &td_l_nav   /* 41 */ &kp LSHIFT 
      >;
    };
 
    nav_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp FR_AT              /* 02 */ &td_question        /* 03 */ &td_hash               /* 04 */ &td_comma              /* 05 */ &td_quote
/* RIGHT */             /* 06 */ &td_bt0                /* 07 */ &td_bt1             /* 08 */ &kp C_VOL_DN           /* 09 */ &kp C_VOL_UP           /* 10 */ &kp C_MUTE          /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &td_dollars            /* 14 */ &hml LSHIFT FR_PIPE /* 15 */ &hml LCTRL FR_COLN     /* 16 */ &hml LALT FR_AMPR      /* 17 */ &hml LCMD FR_DQUO
/* RIGHT */             /* 18 */ &kp HOME               /* 19 */ &kp PAGE_UP         /* 20 */ &kp UP                 /* 21 */ &kp PAGE_DOWN          /* 22 */ &kp END             /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &trans                 /* 26 */ &td_ltgt            /* 27 */ &mt FR_DIAE FR_CIRC    /* 28 */ &none                  /* 29 */ &kp KP_NUMLOCK
/* RIGHT */             /* 30 */ &trans                 /* 31 */ &kp LEFT            /* 32 */ &kp DOWN               /* 33 */ &kp RIGHT              /* 34 */ &trans              /* NA 35 */ NA


/* LEFT  */ /* 36 */ &none      /* 37 */ &td_l_base           /* 38 */ &trans
/* RIGHT */ /* 39 */ &trans     /* 40 */ &td_l_base           /* 41 */ &none 
      >;
    };

    num_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &td_f1_f6        /* 02 */ &td_f2_f7              /* 03 */ &td_f3_f8                /* 04 */ &td_f4_f9            /* 05 */ &td_f5_f10
/* RIGHT */             /* 06 */ &td_f11_f12      /* 07 */ &kp KP_N7              /* 08 */ &kp KP_N8                /* 09 */ &kp KP_N9            /* 10 */ &kp FR_EQL            /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &bt BT_CLR       /* 14 */ &hml LSHIFT FR_PERC    /* 15 */ &hml LCTRL KP_MULTIPLY   /* 16 */ &hml LALT FR_PLUS    /* 17 */ &hml LCMD FR_MINS
/* RIGHT */             /* 18 */ &kp KP_N0        /* 19 */ &kp KP_N4              /* 20 */ &kp KP_N5                /* 21 */ &kp KP_N6            /* 22 */ &td_slash             /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &trans           /* 26 */ &none                  /* 27 */ &kp FR_DEG               /* 28 */ &kp FR_DOT           /* 29 */ &kp FR_UNDS
/* RIGHT */             /* 30 */ &trans           /* 31 */ &kp KP_N1              /* 32 */ &kp KP_N2                /* 33 */ &kp KP_N3            /* 34 */ &trans                /* NA 35 */ NA


/* LEFT  */ /* 36 */ &none      /* 37 */ &td_l_base           /* 38 */ &trans
/* RIGHT */ /* 39 */ &trans     /* 40 */ &td_l_base           /* 41 */ &none 
      >;
    };

    gaming_1_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp TAB           /* 02 */ &kp N1                /* 03 */ &kp N2             /* 04 */ &kp N3             /* 05 */ &kp N4
/* RIGHT */             /* 06 */ &none             /* 07 */ &none                 /* 08 */ &none              /* 09 */ &none              /* 10 */ &none         /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &kp LSHIFT        /* 14 */ &kp FR_A              /* 15 */ &kp FR_Z           /* 16 */ &kp FR_E           /* 17 */ &kp FR_R
/* RIGHT */             /* 18 */ &none             /* 19 */ &none                 /* 20 */ &none              /* 21 */ &none              /* 22 */ &none         /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &kp LCTRL         /* 26 */ &kp FR_Q              /* 27 */ &kp FR_S           /* 28 */ &kp FR_D           /* 29 */ &kp FR_F
/* RIGHT */             /* 30 */ &none             /* 31 */ &none                 /* 32 */ &none              /* 33 */ &none              /* 34 */ &none         /* NA 35 */ NA


/* LEFT  */ /* 36 */ &kp ESC        /* 37 */ &mo L_GAMING_2  /* 38 */ &kp SPACE
/* RIGHT */ /* 39 */ &kp ENTER      /* 40 */ &to L_BASE      /* 41 */ &none 
      >;
    };

    gaming_2_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp N5            /* 02 */ &kp N6                /* 03 */ &kp N7             /* 04 */ &kp N8             /* 05 */ &kp N9
/* RIGHT */             /* 06 */ &none             /* 07 */ &none                 /* 08 */ &none              /* 09 */ &none              /* 10 */ &none         /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &kp FR_T          /* 14 */ &kp FR_Y              /* 15 */ &kp FR_U           /* 16 */ &kp FR_I           /* 17 */ &kp N0
/* RIGHT */             /* 18 */ &none             /* 19 */ &none                 /* 20 */ &none              /* 21 */ &none              /* 22 */ &none         /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &kp FR_G          /* 26 */ &kp FR_H              /* 27 */ &kp FR_J           /* 28 */ &kp FR_K           /* 29 */ &kp FR_L
/* RIGHT */             /* 30 */ &none             /* 31 */ &none                 /* 32 */ &none              /* 33 */ &none              /* 34 */ &none         /* NA 35 */ NA


/* LEFT  */ /* 36 */ &kp ESC        /* 37 */ &none       /* 38 */ &kp SPACE
/* RIGHT */ /* 39 */ &kp ENTER      /* 40 */ &to L_BASE  /* 41 */ &none 
      >;
    };

    mac_base_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp FR_A          /* 02 */ &kp FR_Z              /* 03 */ &kp FR_E           /* 04 */ &kp FR_R           /* 05 */ &kp FR_T
/* RIGHT */             /* 06 */ &kp FR_Y          /* 07 */ &kp FR_U              /* 08 */ &kp FR_I           /* 09 */ &kp FR_O           /* 10 */ &kp FR_P         /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &kp FR_Q          /* 14 */ &hml LSHIFT FR_S      /* 15 */ &hml LCTRL FR_D    /* 16 */ &hml LALT FR_F     /* 17 */ &hml LCMD FR_G
/* RIGHT */             /* 18 */ &hmr LCMD FR_H    /* 19 */ &hmr LALT FR_J        /* 20 */ &hmr LCTRL FR_K    /* 21 */ &hmr LSHIFT FR_L   /* 22 */ &kp FR_M         /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &kp ESCAPE        /* 26 */ &kp FR_W              /* 27 */ &kp FR_X           /* 28 */ &kp FR_C           /* 29 */ &mt INSERT TAB
/* RIGHT */             /* 30 */ &kp BACKSPACE     /* 31 */ &kp FR_V              /* 32 */ &kp FR_B           /* 33 */ &kp FR_N           /* 34 */ &kp DELETE       /* NA 35 */ NA


/* LEFT  */ /* 36 */ &kp LSHIFT     /* 37 */ &td_lm_nav  /* 38 */ &kp SPACE
/* RIGHT */ /* 39 */ &kp ENTER      /* 40 */ &td_lm_nav  /* 41 */ &kp LSHIFT 
      >;
    };
 
    mac_nav_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &kp FRM_AT             /* 02 */ &td_mquestion         /* 03 */ &td_mhash              /* 04 */ &td_comma              /* 05 */ &td_mquote
/* RIGHT */             /* 06 */ &td_bt0                /* 07 */ &td_bt1               /* 08 */ &none                  /* 09 */ &none                  /* 10 */ &none          /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &td_mdollars           /* 14 */ &hml LSHIFT FRM_PIPE  /* 15 */ &hml LCTRL FR_COLN     /* 16 */ &hml LALT FR_AMPR      /* 17 */ &hml LCMD FR_DQUO
/* RIGHT */             /* 18 */ &kp HOME               /* 19 */ &kp PAGE_UP           /* 20 */ &kp UP                 /* 21 */ &kp PAGE_DOWN          /* 22 */ &kp END             /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &trans                 /* 26 */ &td_mltgt             /* 27 */ &mt FR_DIAE FR_CIRC    /* 28 */ &none                  /* 29 */ &kp KP_NUMLOCK
/* RIGHT */             /* 30 */ &trans                 /* 31 */ &kp LEFT              /* 32 */ &kp DOWN               /* 33 */ &kp RIGHT              /* 34 */ &trans              /* NA 35 */ NA


/* LEFT  */ /* 36 */ &none      /* 37 */ &td_lm_base           /* 38 */ &trans
/* RIGHT */ /* 39 */ &trans     /* 40 */ &td_lm_base           /* 41 */ &none 
      >;
    };

    mac_num_layer {
      bindings = <
/* LEFT  */ /* 00 */ NA /* 01 */ &td_f1_f6        /* 02 */ &td_f2_f7              /* 03 */ &td_f3_f8                /* 04 */ &td_f4_f9            /* 05 */ &td_f5_f10
/* RIGHT */             /* 06 */ &td_f11_f12      /* 07 */ &kp KP_N7              /* 08 */ &kp KP_N8                /* 09 */ &kp KP_N9            /* 10 */ &kp FRM_EQL           /* NA 11 */ NA

/* LEFT  */ /* 12 */ NA /* 13 */ &bt BT_CLR       /* 14 */ &hml LSHIFT FR_PERC    /* 15 */ &hml LCTRL KP_MULTIPLY   /* 16 */ &hml LALT FRM_PLUS   /* 17 */ &hml LCMD FRM_MINS
/* RIGHT */             /* 18 */ &kp KP_N0        /* 19 */ &kp KP_N4              /* 20 */ &kp KP_N5                /* 21 */ &kp KP_N6            /* 22 */ &td_mslash            /* NA 23 */ NA

/* LEFT  */ /* 24 */ NA /* 25 */ &trans           /* 26 */ &none                  /* 27 */ &kp FR_DEG               /* 28 */ &kp FR_DOT           /* 29 */ &kp FRM_UNDS
/* RIGHT */             /* 30 */ &trans           /* 31 */ &kp KP_N1              /* 32 */ &kp KP_N2                /* 33 */ &kp KP_N3            /* 34 */ &trans                /* NA 35 */ NA


/* LEFT  */ /* 36 */ &none      /* 37 */ &td_lm_base           /* 38 */ &trans
/* RIGHT */ /* 39 */ &trans     /* 40 */ &td_lm_base           /* 41 */ &none 
      >;
    };
  };
};
