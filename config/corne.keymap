// &mo LOWER

// layer tap : hold = enable layer LOWER else tap/send key space
// &lt LOWER SPACE

/*&lt {
  tapping-term-ms = <200>;
};*/

// enable this layer and disable all layers except the default one
// &to LOWER

// toggle layer
// &tog LOWER

// &trans
// &none

// hold tab : hold = LSHIFT est activé else tap/send key F
// &mt LSHIFT F

// &ht_hp : hold     : si on presse une autre key pendant celle là, ca fait le hold
// &ht_bp : balanced : si on presse et relâche une autre key pendant celle là, ca fait le hold
// &ht_tp : tap      : si on presse une autre key pendant celle là, ca ne fait rien


// ======
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "keymap_french.h"
// #include "helper.h"
// #include "french_unicode.dtsi"

#define L_BASE 0
#define L_NUM  1
#define L_NAV  2

/ {
  // ========
  // BEHAVIOR
  // ========
  /*behaviors {
    single_quote_backquote: hold-tap {
      compatible = "zmk,behavior-hold-tap";
      label = "SINGLE_QUOTE_BACKQUOTE";
      #binding-cells = <2>;
      flavor = "tap-unless-interrupted";
      tapping-term-ms = <200>;
      bindings = <&kp>, <&kp>;
    };
  };*/

  // =====
  // COMBO
  // =====
  /*combos {
    compatible = "zmk,combos";
    combo_esc {
      timeout-ms = <30>;
      key-positions = <0 1>;
      bindings = <&kp ESC>;
    };
    combo_ae {
      timeout-ms = <30>;
      key-positions = <0 2>;
      bindings = <&AE>;
    };
    combo_oe {
      timeout-ms = <30>;
      key-positions = <2 8>;
      bindings = <&OE>;
    };
  };
  */

  // ======
  // KEYMAP
  // ======
  keymap {
    compatible = "zmk,keymap";

    base_layer {
      bindings = <
        &none &kp A      &kp Z &kp E &kp R &kp T        &kp Y         &kp U &kp I &kp O &kp P &none
        &none &kp Q      &kp S &kp D &kp F &kp G        &kp H         &kp J &kp K &kp L &kp M &none
        &none &kp ESCAPE &kp W &kp X &kp C &kp TAB      &kp BACKSPACE &kp V &kp B &kp N &kp DELETE &none
        &mo L_NUM &none &kp SPACE             &kp ENTER &none &mo L_NUM 
      >;
    };

    num_layer {
      bindings = <
        &none &kp A      &kp Z &kp FR_EACU &kp R &kp T        &kp Y         &kp U &kp I &kp O &kp P &none
        &none &kp Q      &kp S &kp D &kp F &kp G              &kp H         &kp J &kp K &kp L &kp M &none
        &none &kp ESCAPE &kp W &kp X &kp C &kp TAB            &kp BACKSPACE &kp V &kp B &kp N &kp DELETE &none
        &none &none &kp SPACE             &kp ENTER &none &none 
      >;
    };
  };
};
