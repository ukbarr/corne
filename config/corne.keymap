// &mo LOWER

// layer tap : hold = enable layer LOWER else tap/send key space
// &lt LOWER SPACE

/*&lt {
  tapping-term-ms = <200>;
};*/

// enable this layer and disable all layers except the default one
// &to LOWER

// toggle layer
// &tog LOWER

// &trans
// &none

// hold tab : hold = LSHIFT est activé else tap/send key F
// &mt LSHIFT F

// &ht_hp : hold     : si on presse une autre key pendant celle là, ca fait le hold
// &ht_bp : balanced : si on presse et relâche une autre key pendant celle là, ca fait le hold
// &ht_tp : tap      : si on presse une autre key pendant celle là, ca ne fait rien


// ======
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "keymap_french.h"
// #include "helper.h"
// #include "french_unicode.dtsi"

#define NA &none
#define L_BASE 0
#define L_NUM  1
#define L_NAV  2

/ {
  // ========
  // BEHAVIOR
  // ========
  behaviors {
    single_quote_backquote: hold-tap {
      compatible = "zmk,behavior-hold-tap";
      label = "SINGLE_QUOTE_BACKQUOTE";
      #binding-cells = <2>;
      flavor = "tap-unless-interrupted";
      tapping-term-ms = <200>;
      bindings = <&kp>, <&kp>;
    };
  };

  // =====
  // COMBO
  // =====
  /*combos {
    compatible = "zmk,combos";
    combo_esc {
      timeout-ms = <30>;
      key-positions = <0 1>;
      bindings = <&kp ESC>;
    };
    combo_ae {
      timeout-ms = <30>;
      key-positions = <0 2>;
      bindings = <&AE>;
    };
    combo_oe {
      timeout-ms = <30>;
      key-positions = <2 8>;
      bindings = <&OE>;
    };
  };
  */

  // ======
  // KEYMAP
  // ======
  keymap {
    compatible = "zmk,keymap";

    base_layer {
      bindings = <
        /* LEFT  */ /* 00 */ NA             /* 01 */ &kp FR_A    /* 02 */ &kp FR_Z  /* 03 */ &kp FR_E  /* 04 */ &kp FR_R  /* 05 */ &kp FR_T
        /* RIGHT */ /* 06 */ &kp FR_Y       /* 07 */ &kp FR_U    /* 08 */ &kp FR_I  /* 09 */ &kp FR_O  /* 10 */ &kp FR_P  /* 11 */ NA
        
        /* LEFT  */ /* 12 */ NA             /* 13 */ &kp FR_Q    /* 14 */ &kp FR_S  /* 15 */ &kp FR_D  /* 16 */ &kp FR_F  /* 17 */ &kp FR_G
        /* RIGHT */ /* 18 */ &kp FR_H       /* 19 */ &kp FR_J    /* 20 */ &kp FR_K  /* 21 */ &kp FR_L  /* 22 */ &kp FR_M  /* 23 */ NA
        
        /* LEFT  */ /* 24 */ NA             /* 25 */ &kp ESCAPE  /* 26 */ &kp FR_W  /* 27 */ &kp FR_X  /* 28 */ &kp FR_C    /* 29 */ &kp TAB
        /* RIGHT */ /* 30 */ &kp BACKSPACE  /* 31 */ &kp FR_V    /* 32 */ &kp FR_B  /* 33 */ &kp FR_N  /* 34 */ &kp DELETE  /* 35 */ NA


        /* LEFT  */ /* 36 */ &mo L_NUM      /* 37 */ &mt FR_F FR_G   /* 38 */ &kp SPACE
        /* RIGHT */ /* 39 */ &kp ENTER      /* 40 */ &none           /* 41 */ &mo L_NUM 
      >;
    };

    num_layer {
      bindings = <
        /* LEFT  */ /* 00 */ NA             /* 01 */ &kp FR_EGRV /* 02 */ &kp FR_Z  /* 03 */ &kp FR_E  /* 04 */ &kp FR_R  /* 05 */ &kp FR_T
        /* RIGHT */ /* 06 */ &kp FR_Y       /* 07 */ &kp FR_U    /* 08 */ &kp FR_I  /* 09 */ &kp FR_O  /* 10 */ &kp FR_P  /* 11 */ NA
        
        /* LEFT  */ /* 12 */ NA             /* 13 */ &kp FR_Q    /* 14 */ &kp FR_S  /* 15 */ &kp FR_D  /* 16 */ &kp FR_F  /* 17 */ &kp FR_G
        /* RIGHT */ /* 18 */ &kp FR_H       /* 19 */ &kp FR_J    /* 20 */ &kp FR_K  /* 21 */ &kp FR_L  /* 22 */ &kp FR_M  /* 23 */ NA
        
        /* LEFT  */ /* 24 */ NA             /* 25 */ &kp ESCAPE  /* 26 */ &kp FR_W  /* 27 */ &kp FR_X  /* 28 */ &kp FR_C    /* 29 */ &kp TAB
        /* RIGHT */ /* 30 */ &kp BACKSPACE  /* 31 */ &kp FR_V    /* 32 */ &kp FR_B  /* 33 */ &kp FR_N  /* 34 */ &kp DELETE  /* 35 */ NA


        /* LEFT  */ /* 36 */ &mo L_NUM      /* 37 */ &mt FR_F FR_G   /* 38 */ &kp SPACE
        /* RIGHT */ /* 39 */ &kp ENTER      /* 40 */ &none           /* 41 */ &mo L_NUM 
      >;
    };
  };
};
